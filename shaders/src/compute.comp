#version 460

layout (local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

layout (rgba8, set = 0, binding = 0) uniform image3D output_image;

layout(std430, set = 0, binding = 1) buffer VertexBuffer {
    vec4 vertices[];
};

layout(std430, set = 0, binding = 2) buffer IndexBuffer {
    uint indices[];
};

layout(set = 0, binding = 3) uniform Params {
    uint index_count;
    float scale;
};

bool triangleAABBIntersect(vec3 v0, vec3 v1, vec3 v2, vec3 boxMin, vec3 boxMax) {
    vec3 triangleMin = min(v0, min(v1, v2));
    vec3 triangleMax = max(v0, max(v1, v2));

    if (any(greaterThan(boxMin, triangleMax)) || any(lessThan(boxMax, triangleMin))) {
        return false;
    }

    vec3 e0 = v1 - v0;
    vec3 e1 = v2 - v1;
    vec3 e2 = v0 - v2;

    vec3 boxHalfSize = (boxMax - boxMin) * 0.5;
    vec3 boxCenter = (boxMax + boxMin) * 0.5;
    vec3 v0r = v0 - boxCenter;

    vec3 normal = cross(e0, e1);
    float rad = boxHalfSize.x * abs(normal.x) +
                boxHalfSize.y * abs(normal.y) +
                boxHalfSize.z * abs(normal.z);
    float s = dot(normal, v0r);
    if (abs(s) > rad) {
        return false;
    }

    return true;
}

void main() {
    ivec3 pixel_coords = ivec3(gl_GlobalInvocationID.xyz);
    ivec3 image_size = imageSize(output_image);

    if (any(greaterThanEqual(pixel_coords, image_size))) {
        return;
    }

    float y_scale = 1.0;
    float x_scale = 2.0 * float(image_size.x) / float(image_size.y);
    float z_scale = 2.0 * float(image_size.z) / float(image_size.y);

    float voxel_size_y = 1.0 / float(image_size.y);
    vec3 voxel_size = vec3(voxel_size_y * x_scale, voxel_size_y, voxel_size_y * z_scale);

    vec3 voxel_min = vec3(
        pixel_coords.x * voxel_size.x,
        pixel_coords.y * voxel_size.y,
        pixel_coords.z * voxel_size.z
    );
    vec3 voxel_max = voxel_min + voxel_size;

    bool intersects = false;

    for (uint i = 0; i < index_count; i += 3) {
        vec3 v0 = vertices[indices[i + 0]].xyz * (0.5f * scale);
        vec3 v1 = vertices[indices[i + 1]].xyz * (0.5f * scale);
        vec3 v2 = vertices[indices[i + 2]].xyz * (0.5f * scale);

        v0 = vec3(v0.x * x_scale, v0.y * y_scale, v0.z * z_scale) + vec3(x_scale * 0.5, 0.5, z_scale * 0.5);
        v1 = vec3(v1.x * x_scale, v1.y * y_scale, v1.z * z_scale) + vec3(x_scale * 0.5, 0.5, z_scale * 0.5);
        v2 = vec3(v2.x * x_scale, v2.y * y_scale, v2.z * z_scale) + vec3(x_scale * 0.5, 0.5, z_scale * 0.5);

        if (triangleAABBIntersect(v0, v1, v2, voxel_min, voxel_max)) {
            intersects = true;
            break;
        }
    }

    vec4 color = intersects ? vec4(0.0, 1.0, 0.0, 1.0) : vec4(0.0);
    imageStore(output_image, pixel_coords, color);
}
