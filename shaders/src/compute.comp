#version 460

layout (local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

layout (rgba8, set = 0, binding = 0) uniform image3D output_image;

layout(std430, set = 0, binding = 1) buffer VertexBuffer {
    vec4 vertices[];
};

layout(std430, set = 0, binding = 2) buffer IndexBuffer {
    uint indices[];
};

layout(set = 0, binding = 3) uniform Params {
    uint index_count;
    float scale;
};

bool triangleAABBIntersect(vec3 v0, vec3 v1, vec3 v2, vec3 boxMin, vec3 boxMax) {
    vec3 e0 = v1 - v0;
    vec3 e1 = v2 - v1;
    vec3 e2 = v0 - v2;

    vec3 boxCenter = 0.5 * (boxMin + boxMax);
    vec3 boxHalfSize = 0.5 * (boxMax - boxMin);
    vec3 v0r = v0 - boxCenter;

    vec3 normal = cross(e0, e1);
    float rad = dot(boxHalfSize, abs(normal));
    float s = dot(normal, v0r);

    return abs(s) <= rad;
}

void main() {
    ivec3 pixel_coords = ivec3(gl_GlobalInvocationID.xyz);
    ivec3 image_size = imageSize(output_image);

    if (any(greaterThanEqual(pixel_coords, image_size))) {
        return;
    }

    float inv_image_y = 1.0 / float(image_size.y);
    float x_scale = 2.0 * float(image_size.x) * inv_image_y;
    float y_scale = 1.0;
    float z_scale = 2.0 * float(image_size.z) * inv_image_y;

    vec3 voxel_size = vec3(x_scale, y_scale, z_scale) * inv_image_y;
    vec3 voxel_min = vec3(pixel_coords) * voxel_size;
    vec3 voxel_max = voxel_min + voxel_size;

    bool intersects = false;
    for (uint i = 0; i < index_count; i += 3) {
        vec3 v0 = vertices[indices[i + 0]].xyz * 0.5 * scale;
        vec3 v1 = vertices[indices[i + 1]].xyz * 0.5 * scale;
        vec3 v2 = vertices[indices[i + 2]].xyz * 0.5 * scale;

        vec3 scale_offset = vec3(0.5 * x_scale, 0.5, 0.5 * z_scale);
        v0 = v0 * vec3(x_scale, y_scale, z_scale) + scale_offset;
        v1 = v1 * vec3(x_scale, y_scale, z_scale) + scale_offset;
        v2 = v2 * vec3(x_scale, y_scale, z_scale) + scale_offset;

        if (triangleAABBIntersect(v0, v1, v2, voxel_min, voxel_max)) {
            intersects = true;
            break;
        }
    }

    vec4 color = intersects ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0);
    imageStore(output_image, pixel_coords, color);
}
